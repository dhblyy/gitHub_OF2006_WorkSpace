/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM Extend Project: Open Source CFD        |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

// Domain
axisLevel               0.0;  // x-coord of axis (right boundary of domain)
bottomLevel             -1.0; // y-coord of bottom of domain
topLevel                1.0;  // y-coord of top of domain
farFieldWall            -0.572; // x-coord of far field wall
wedgeAngle              5.0;  // Wedge angle in degrees
// Size of block moving with sphere (no cell deformation), in sphere radii
// above and below centre of sphere
upperSphereBlock        5.0;
lowerSphereBlock        5.0;
sphereLayerThickness    2.0; // Total layer thickness in sphere radii

// Sphere
sphereRadius            0.028;
sphereCentreHeight      0.147; // y-coord of sphere centre

pi                      #calc "Foam::constant::mathematical::pi";

// Calculated positions
sphereRadiusPosition    #calc "-1.0*(1.0 + $sphereLayerThickness)*$sphereRadius"; //"-1.0* $sphereRadius";
AMIBlockPosition        #calc "2.0*$sphereRadiusPosition  + $sphereRadius";
// Centre plane is z=0, so use half of wedge angle to calculate pos and neg
// z-positions
halfAngleRad            #calc "0.5*$wedgeAngle*$pi/180.0";  // =2.5
tanAlpha                #calc "tan($halfAngleRad)";        
// Multiply by -1 because tan give negative value, obtain z position
firstBlockPosDepth      #calc "-1.0*$tanAlpha*$sphereRadiusPosition";
firstBlockNegDepth      #calc "-1.0*$firstBlockPosDepth";
AMIBlockPosDepth        #calc "-1.0*$tanAlpha*$AMIBlockPosition";
AMIBlockNegDepth        #calc "-1.0*$AMIBlockPosDepth";
farFieldPosDepth        #calc "-1.0*$tanAlpha*$farFieldWall";
farFieldNegDepth        #calc "-1.0*$farFieldPosDepth";

bottomBlockTopHeight    #calc "$sphereCentreHeight - $lowerSphereBlock*$sphereRadius";
topBlockBottomHeight    #calc "$sphereCentreHeight + $upperSphereBlock*$sphereRadius";

topSphere               #calc "$sphereCentreHeight + $sphereRadius";
bottomSphere            #calc "$sphereCentreHeight - $sphereRadius";
topSphereLayer          #calc "$sphereCentreHeight + (1.0 + $sphereLayerThickness)*$sphereRadius";
bottomSphereLayer       #calc "$sphereCentreHeight - (1.0 + $sphereLayerThickness)*$sphereRadius";

// Layer block below sphere
innerBottomLayerX       #calc "-1.0*cos(45.0*$pi/180.0)*$sphereRadius";
innerBottomLayerY       #calc "$sphereCentreHeight - cos(45.0*$pi/180.0)*$sphereRadius";
innerBottomLayerZPos    #calc "-1.0*$tanAlpha*$innerBottomLayerX";
innerBottomLayerZNeg    #calc "-1.0*$innerBottomLayerZPos";

innerBottomArcX1        #calc "-1.0*sin(22.5*$pi/180.0)*$sphereRadius";
innerBottomArcY1        #calc "$sphereCentreHeight - cos(22.5*$pi/180.0)*$sphereRadius";
innerBottomArcZ1Pos     #calc "$innerBottomArcX1*$tanAlpha";
innerBottomArcZ1Neg     #calc "-1.0*$innerBottomArcZ1Pos";

outerBottomArcX1        #calc "-1.0*sin(22.5*$pi/180.0)*$sphereRadius*(1.0 + $sphereLayerThickness)";
outerBottomArcY1        #calc #{ $sphereCentreHeight - cos(22.5*$pi/180.0)*$sphereRadius*(1.0 + $sphereLayerThickness) #};
outerBottomArcZ1Pos     #calc "$outerBottomArcX1*$tanAlpha";
outerBottomArcZ1Neg     #calc "-1.0*$outerBottomArcZ1Pos";

outerBottomLayerX       #calc "-1.0*cos(45.0*$pi/180.0)*(1.0 + $sphereLayerThickness)*$sphereRadius";
outerBottomLayerY       #calc "$sphereCentreHeight - cos(45.0*$pi/180.0)*(1.0 + $sphereLayerThickness)*$sphereRadius";
outerBottomLayerZPos    #calc "-1.0*$tanAlpha*$outerBottomLayerX";
outerBottomLayerZNeg    #calc "-1.0*$outerBottomLayerZPos";

// Layer block above sphere
innerTopLayerX          #calc "cos(135.0*$pi/180.0)*$sphereRadius";
innerTopLayerY          #calc "$sphereCentreHeight - cos(135.0*$pi/180.0)*$sphereRadius";
innerTopLayerZPos       #calc "-1.0*$tanAlpha*$innerBottomLayerX";
innerTopLayerZNeg       #calc "-1.0*$innerBottomLayerZPos";

innerTopArcX1           #calc "-1.0*sin(157.5*$pi/180.0)*$sphereRadius";
innerTopArcY1           #calc "$sphereCentreHeight - cos(157.5*$pi/180.0)*$sphereRadius";
innerTopArcZ1Pos        #calc "$innerTopArcX1*$tanAlpha";
innerTopArcZ1Neg        #calc "-1.0*$innerTopArcZ1Pos";

outerTopArcX1           #calc "-1.0*sin(157.5*$pi/180.0)*$sphereRadius*(1.0 + $sphereLayerThickness)";
outerTopArcY1           #calc "$sphereCentreHeight - cos(157.5*$pi/180.0)*$sphereRadius*(1.0 + $sphereLayerThickness)";
outerTopArcZ1Pos        #calc "$outerTopArcX1*$tanAlpha";
outerTopArcZ1Neg        #calc "-1.0*$outerTopArcZ1Pos";

outerTopLayerX          #calc "cos(135.0*$pi/180.0)*(1.0 + $sphereLayerThickness)*$sphereRadius";
outerTopLayerY          #calc "$sphereCentreHeight - cos(135.0*$pi/180.0)*(1.0 + $sphereLayerThickness)*$sphereRadius";
outerTopLayerZPos       #calc "-1.0*$tanAlpha*$outerTopLayerX";
outerTopLayerZNeg       #calc "-1.0*$outerTopLayerZPos";

// Layer block left of sphere
innerLeftArcX           #calc "-1.0*$sphereRadius";
innerLeftArcY           #calc "$sphereCentreHeight";
innerLeftArcZPos        #calc "-1.0*$tanAlpha*$innerLeftArcX";
innerLeftArcZNeg        #calc "-1.0*$innerLeftArcZPos";

outerLeftArcX           #calc "-1.0*(1.0 + $sphereLayerThickness)*$sphereRadius";
outerLeftArcZPos        #calc "-1.0*$tanAlpha*$outerLeftArcX";
outerLeftArcZNeg        #calc "-1.0*$outerLeftArcZPos";



vertices
(
    
    ($axisLevel            $bottomLevel 0) //  0
    ($axisLevel            $topLevel 0) // 1

   /* ($farFieldWall $bottomLevel $farFieldPosDepth) // 2
    
    ($farFieldWall $topLevel $farFieldPosDepth) // 3

    ($farFieldWall $bottomLevel $farFieldNegDepth) // 4
   
    ($farFieldWall $topLevel $farFieldNegDepth) // 5
    */
// Farfield block
    ($farFieldWall $bottomLevel $farFieldPosDepth) // 2
    ($AMIBlockPosition $bottomLevel $AMIBlockPosDepth) // 3
    ($AMIBlockPosition $topLevel $AMIBlockPosDepth) // 4
    ($farFieldWall $topLevel $farFieldPosDepth) // 5

    ($farFieldWall $bottomLevel $farFieldNegDepth) // 6
    ($AMIBlockPosition $bottomLevel $AMIBlockNegDepth) // 7
    ($AMIBlockPosition $topLevel $AMIBlockNegDepth) // 8
    ($farFieldWall $topLevel $farFieldNegDepth) // 9

 
);

edgeNumber 1; // 0.707;

layerGrading 0.5;
invLayerGrading #calc "1.0/$layerGrading";
blockGrading 0.3;
invBlockGrading #calc "1.0/$blockGrading";

blocks
(
     hex (7 0 1 8 3 0 1 4) backgroundBlock (10 105 1) simplegrading (1 1 1)

      hex (6 7 8 9 2 3 4 5) backgroundBlock (25 105 1) simplegrading (1 1 1)
   
 
);

edges
(
 
);

boundary
(
    oversetpatch
     {
        type overset;
        faces ();
     }  
    front
    {
        type wedge;
        faces
        (
            (0 1 4 3)
	    (3 4 5 2)
           
        );
    }
    back
    {
        type wedge;
        faces
        (
            (0 7 8 1)
	    (7 6 9 8)
        );
    }
    
    top
    {
        type wall;
        faces
        (
            (1 8 4 1)
	    (8 9 5 4)
        );
    }
    bottom
    {
        type wall;
        faces
        (
            (0 3 7 0)
	    (3 2 6 7)
        );
    }
    farFieldWall
    {
        type wall;
        faces
        (
            (2 5 9 6)
        );
    }
   
    
    
);

mergePatchPairs
(

);


// ************************************************************************* //
